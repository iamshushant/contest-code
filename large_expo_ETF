b is too large 

#include<bits/stdc++.h>
using namespace std;

const int m = 1e9+7;

// here m is price

int binExpo(long long a,long long b,int m){
	int ans=1;
	while(b>0){
		if(b&1){
			ans=(ans*1ll*a)%m;
		}
		a=(a*1ll*a)%m;
		b>>=1;
	}
	return ans;
}

int main(){

	// 50^64^32
	// here b is too large
	cout<<binExpo(50,binExpo(64,32,m-1),m);

	return 0;
}




if m  is not prime


leetcode - 372;
Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.

Input: a = 1, b = [4,3,3,8,5,2]
Output: 1




lass Solution {
// ETF of 1337 is  1337*(1-1/7)*(1-1/191) = 1440

const int m = 1337;

int binExpo(int a ,int b){
    int ans=1;
    while(b>0){
        if(b&1){
            ans=(ans*1ll*a)%m;
        }
        a=(a*1ll*a)%m;
        b=b>>1;
    }
    return ans;
}

public:
    int superPow(int a, vector<int>& b) {
        int bmod=0;
        for(auto item : b){
            bmod=(bmod*10+item)%1140;
        }
        return binExpo(a,bmod);
    }
};
