
#include <bits/stdc++.h>
using namespace std;

const int N = 1e7 + 10;
vector<bool> is_prime(N, 1);
vector<int> lp(N, 0), hp(N, 0);
// Q = 10^7  , N=10^7

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif


	// N * (log(logN))
	is_prime[0] = is_prime[1] = false;
	for (int i = 2; i < N; i++) {
		if (is_prime[i] == true) {
			lp[i] = hp[i] = i;
			for (int j = 2 * i; j < N; j += i) {
				is_prime[j] = false;
				hp[j] = i;
				if (lp[j] == 0) {
					lp[j] = i;
				}
			}
		}
	}



	// query for prime or not
	// int q;
	// cin >> q;
	// while (q--) {
	// 	int num;
	// 	cin >> num;
	// 	if (is_prime[num]) {
	// 		cout << "PRIME" << endl;
	// 	} else {
	// 		cout << "NOT PRIME" << endl;
	// 	}
	// }


	// lowest-prime and hoghest prime
	// for (int i = 1; i < 100; i++) {
	// 	cout << lp[i] << " " << hp[i] << endl;
	// }



	// finding prime factorization
	// log(n)
	int n;
	cin >> n;
	unordered_map<int, int> prime_factors;
	while (n > 1) {
		int prime_factor = hp[n];
		while (n % prime_factor == 0) {
			prime_factors[prime_factor]++;
			n = n / prime_factor;
		}
	}

	for (auto item : prime_factors) {
		cout << item.first << " " << item.second << endl;
	}



	return 0;
}



code for finding divisor , count of divisor and sum of divisor


#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 10;

vector<int> divisors[N];

int sum[N];

int main() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif


	// N * (log(logN))
	for (int i = 1; i < N; i++) {
		for (int j =  i; j < N; j += i) {
			divisors[j].push_back(i);
			sum[j] += i;
		}
	}


	for (int i = 1; i < 10; i++) {
		for (auto it : divisors[i]) {
			cout << it << " ";
		}
		cout << endl;
	}


	return 0;
}
